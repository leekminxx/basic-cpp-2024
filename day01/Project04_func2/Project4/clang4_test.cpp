#include <iostream>

/*int gloval -> 전역 변수(프로그램의 어디에서든지 접근할 수 있는 변수) */
int gloval = 100;


/* a = func() 함수 내에서만 접근할 수 있음, 다른 함수 -> 외부에서는 사용할 수 없음 */
void func() {
	int a = 100; // a  = 지역변수 -> 특정 범위(scope) 내에서만 접근할 수 있는 변수
}

int main(void)
{
	int val1, val2; 
	int result = 0;
	// int val1;
	// int val2; => 위에 처럼 한줄로 적어도 가능, 아님 val1,2 다로 적어도 됨
	// 변수 선언 과 동시에 값을 대입 : 변수 초기화
	std::cout << "두 개의 숫자 입력:"; // 키보드로 val1, val2를 입력 받음
	std::cin >> val1 >> val2;

	if (val1 < val2)
	{
		for (int i = val1 + 1; i < val2; i++) // 초기값 = i값 = val1 + 1(위에 '두개의 숫자 입력' <= 숫자 받음), 조건식 = val2값보다 작게 받는다,증감식 = i ++ => 참 
			result += i; 

	}
	else
	{
		for (int i = val2 + 1; i < val1; i++) // 초기값 = i값 = val2 + 1(위에 '두개의 숫자 입력' <= 숫자 받음), 조건식 = val1값보다 작게 받는다,증감식 = i ++ => 참 
			result += i;
	}
	std::cout << "두개의 Val Add Result: " << result << std::endl;
	return 0;
}
/* 지역변수 = 로컬변수
-> 선언되어진 범위 안에서만 사용이 가능(static 영역에 저장)
*/

/* 
제어문
	1. 선택제어문 = if, switch
	2. 반복제어문 = for,while

	*for(초기식; 조건식; 증감식){

	* }
*/
// 1. int gloval = 100;
// 전역 변수 gloval을 선언 
// -> 초기값을 100으로 설정합. 
// --> 이 변수는 프로그램의 어디서든지 접근할 수 O.

// 2. void func() 
// 함수 func()을 정의.
// -> 함수는 특정 범위(scope) 내에서만 접근할 수 있는 지역 변수 a를 선언.

// 3. void func()
// 함수 func()을 정의합니다. 이 함수는 특정 범위(scope) 내에서만 접근할 수 있는 지역 변수 a를 선언합니다.


// 이 코드는 두 숫자 val1과 val2 사이의 숫자를 모두 더하는 과정을 구현.
// 조건문을 사용하여 두 숫자를 비교한 후, 작은 숫자 -> 큰 숫자까지 = 숫자를 더함 
// 큰 숫자 -> 작은 숫자까지 = 숫자를 더하는 방식으로 동작.

// if (val1 < val2) : 만약 val1이 val2보다 작다면, 즉 첫 번째 숫자가 두 번째 숫자보다 작을 경우를 의미.
//		for (int i = val1 + 1; i < val2; i++) : 첫 번째 숫자 val1보다 큰 값을 초기값으로 설정, 
//												두 번째 숫자 val2보다 작은 범위까지 반복하는 반복문을 시작.
//												이 범위는 두 숫자 사이의 숫자들을 포함하지 않음.
//		result += i; : 각 반복마다 현재의 i 값을 result 변수에 더함.
//						따라서 val1과 val2 사이의 숫자를 모두 더하게 됨.
//		else: 위의 조건이 거짓인 경우, 즉 첫 번째 숫자가 두 번째 숫자보다 크거나 같을 경우를 의미함.
//			for (int i = val2 + 1; i < val1; i++) : 두 번째 숫자 val2보다 큰 값을 초기값으로 설정, 
//													첫 번째 숫자 val1보다 작은 범위까지 반복하는 반복문을 시작.
//													이 범위는 두 숫자 사이의 숫자들을 포함하지 않음.
//		result += i; : 각 반복마다 현재의 i 값을 result 변수에 더함.
//						따라서 val1과 val2 사이의 숫자를 모두 더하게 됨.
//						-> 이후, 모든 숫자를 더한 결과를 출력하고, 프로그램을 종료.

//		예를 들어, 사용자로부터 val1에 3, val2에 7을 입력한 경우를 생각.

//	if (val1 < val2) 조건문이 참이므로, 4, 5, 6을 더하게 됨.
//		따라서 "두개의 Val Add Result: 15"가 출력됨.